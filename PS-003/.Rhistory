library(pacman)
p_load(tidyverse)
read_csv('/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/PS-003/NaturalGasPrice.csv')
dat = read_csv('/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/PS-003/NaturalGasPrice.csv')
dat = read_csv('/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/PS-003/NaturalGasPrice.csv')
dat = read_csv('/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/PS-003/HeatingOil.csv')
dat = read_csv('/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/PS-003/HeatingOil.csv') %>% as.data.table()
p_load(data.table)
dat = read_csv('/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/PS-003/HeatingOil.csv') %>% as.data.table()
names(dat) = c("time", "price_htg_oil")
dat
oil = dat
oil[, month_year := month_year %>% mdy() %>% floor_date("month")]
p_load(lubridate)
oil[, month_year := month_year %>% mdy() %>% floor_date("month")]
oil[, month_year := time %>% mdy() %>% floor_date("month")]
oil
unique(oil[order(-month_year), by = 'month_year']
)
unique(oil[order(-month_year)], by = 'month_year')
oil_out = unique(oil[order(-month_year)], by = 'month_year')
oil_out = unique(oil[order(-month_year)], by = 'month_year') %>% select(-time)
oil_out
oil_out$month_year %>% unique()
oil[dt[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
oil[oil[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
gas <- read_csv("NaturalGasPrice.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na()]
prop <- prop[!is.na()]
unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
unique(prop[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
oil[oil[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
gas <- read_csv("NaturalGasPrice.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na()]
prop <- prop[!is.na()]
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na(price_gas)]
prop <- prop[!is.na(price_prop)]
unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas
gas <- read_csv("NaturalGasPrice.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
gas
gas <- read_csv("NatGas.csv") %>% as.data.table()
gas <- read_csv("NatGas.csv") %>% as.data.table()
gas <- read_csv("NatGas.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na(price_gas)]
prop <- prop[!is.na(price_prop)]
unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
unique(prop[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
oil = unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas = unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
prop = unique(prop[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas <- read_csv("NatGas.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na(price_gas)]
prop <- prop[!is.na(price_prop)]
oil = unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas = unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
prop = unique(prop[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
oil
gas
prop
na.interp(prop, lambda - 'auto')
p_load(forecast)
na.interp(prop, lambda - 'auto')
gas = na.interp(gas)
prop = na.interp(prop)
prop
prop$price_prop %>% is.na() %>% sum()
price_df <- merge(price_df, prop, by = 'month_year', all = F)
price_df <- merge(gas, oil, by = "month_year", all = F)
price_df <- merge(price_df, prop, by = 'month_year', all = F)
price_df[, `:=`(
month = month(month_year),
year = year(month_year),
t_month = 1:.N
)]
price_df[, t := year + (month-1)/12]
price_df
lm(data = price_df, price_gas ~ price_prop + price_oil + lag(price_prop)) %>% summary()
lm(data = price_df, price_gas ~ price_prop + price_oil + lag(price_oil)) %>% summary()
lm(data = price_df, price_prop ~ price_gas + price_oil + lag(price_oil)) %>% summary()
lm(data = price_df, price_prop ~ price_gas + price_oil + lag(price_oil,2)) %>% summary()
lm(data = price_df, price_prop ~ price_gas + price_oil + lag(price_oil,12)) %>% summary()
p_load(tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
library(pacman)
p_load(tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
gas <- read_csv("NatGas.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na(price_gas)]
prop <- prop[!is.na(price_prop)]
oil = unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas = unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
prop = unique(prop[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
oil = seas(na.interp(oil))
gas = seas(na.interp(gas))
prop = seas(na.interp(prop))
unemploy<-ts(oil$price_oil,frequency=12,start(1990,1))
unemploy
oil_ts<-ts(oil$price_oil,frequency=12,start(1990,1)) %>% seas()
start(1990,1)
oil_ts<-ts(oil$price_oil,frequency=12,start(1990,1)) %>% seas(,x11 = '')
oil_ts<- seas(ts(oil$price_oil,frequency=12,start(1990,1)),x11 = '')
oil$month_year %>% min()
oil_ts<- seas(ts(oil$price_oil,frequency=12,start(1990,10)),x11 = '')
oil$month_year %>% unique()
gas <- read_csv("NatGas.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na(price_gas)]
prop <- prop[!is.na(price_prop)]
oil[, month_year := month_year %>% mdy() %>% floor_date("month")]
oil$month_year %>% unique()
oil[oil[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
oil$month_year %>% unique()
oil = unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas <- read_csv("NatGas.csv") %>% as.data.table()
oil <- read_csv("HeatingOil.csv") %>% as.data.table()
prop <- read_csv("PropanePrices.csv") %>% as.data.table()
names(gas) = c('month_year', 'price_gas')
names(oil) = c('month_year', 'price_oil')
names(prop) = c('month_year', 'price_prop')
oil <- oil[!is.na(price_oil)]
gas <- gas[!is.na(price_gas)]
prop <- prop[!is.na(price_prop)]
oil = unique(oil[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
gas = unique(gas[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
prop = unique(prop[, month_year := month_year %>% mdy() %>% floor_date("month")], by = 'month_year')
oil[oil[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
oil = na.interp(oil)
oil
oil[oil[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
gas[gas[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
prop[prop[,.(month_year = seq.Date(min(month_year), max(month_year), by = "day"))], on = .(month_year)]
oil = na.interp(oil)
gas = na.interp(gas)
prop = na.interp(prop)
gas
oil
prop
oil_ts<- seas(ts(oil$price_oil,frequency=12,start(1990,10)))
oil = na.interp(oil)
oil
oil$price_oil
ts(oil$price_oil,frequency=12,start(1990,10))
p_load(xtset, tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
p_load(stats, tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
p_load(stats, tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
ts(oil$price_oil,frequency=12,start(1990,10))
price_df$t_month
oil$price_oil = gas$price_gas*.21234564321345
price_df = price_df %>% mutate(price_oil = price_oil + price_gas*.0223443247836392)
p_load(stats, tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
library(pacman)
p_load(stats, tidyverse, data.table, lubridate, magrittr, forecast, seasonal)
p
price_df = price_df %>% mutate(price_oil = price_oil + price_gas*.0223443247836392)
lm(data = price_df, price_prop ~ price_gas + price_oil + lag(price_oil,2)) %>% summary()
lm(data = price_df, price_prop ~ price_gas + price_oil + lag(price_oil)) %>% summary()
lm(data = price_df, price_oil ~ price_gas + lag(price_oil) + lag(price_gas)) %>% summary()
lm(data = price_df, price_oil ~ price_gas + lag(price_oil) + lag(price_gas) + price_prop) %>% summary()
write_csv(price_df, "ps03_data.csv")
price_df
p_load(kable, kableExtra)
var_tbl <- data.frame(
Variable = names(price_df) %>% magrittr::extract(1:7) %>% paste0(".mono-small[", ., "]"),
Description = c(
"The observation's month and year (.mono-small[character])",
"The average (Henry Hub) price of natural gas, $ per 1MM BTU (.mono-small[numeric])",
"The average (Brent Crude) price of oil, $ per barrel",
"The average Retail/Resale price of propane, $ per Gallon (.mono-small[numeric])",
"Month of Observation",
"Year of Observation",
"Time, measured by months in the dataset (.mono-small[numeric])",
"Time, approximately by fractions of years (.mono-small[numeric])"
)
)
var_tbl <- data.frame(
Variable = names(price_df) %>% magrittr::extract(1:8) %>% paste0(".mono-small[", ., "]"),
Description = c(
"The observation's month and year (.mono-small[character])",
"The average (Henry Hub) price of natural gas, $ per 1MM BTU (.mono-small[numeric])",
"The average (Brent Crude) price of oil, $ per barrel",
"The average Retail/Resale price of propane, $ per gallon (.mono-small[numeric])",
"Month of Observation (.mono-small[numeric])",
"Year of Observation (.mono-small[numeric])",
"Time, measured by months in the dataset (.mono-small[numeric])",
"Time, approximately by fractions of years (.mono-small[numeric])"
)
)
# pagedown::chrome_print("001-questions.html")
pagedown::chrome_print("001-questions.html", output = "001-solutions.pdf")
# pagedown::chrome_print("001-questions.html")
pagedown::chrome_print("ps01.html", output = "001-solutions.pdf")
round(ols_1a$coefficients[2], 3)
# Load packages
library(pacman)
p_load(tidyverse, broom, here)
# Load data
price_df <- read_csv("ps03_data.csv")
# Estimate model 1a with OLS
ols_1a <- lm(price_gas ~ price_prop, data = price_df)
# Results
tidy(ols_1a)
round(ols_1a$coefficients[2], 3)
zillowdbloc <- '/Volumes/G-DRIVE-mobile-SSD-R-Series/ZTrans/sorting_wui.sqlite'
ztrax_database <- dbConnect(RSQLite::SQLite(), zillowdbloc)
hmda_database <- dbConnect(Postgres(), host = 'localhost', dbname = 'hmda',
password = '', user = 'postgres')
library(pacman)
p_load(gmodels,
raster,
tidyverse,
gtools,
RPostgres,
sqldf,
RODBC,
DT,
rgdal,
UScensus2000tract,
sf,
sp,
rgeos,
spatialEco,
tigris,
dbplyr,
data.table,
here,
stringi,
elevatr,
haven,
rgdal,
gdalUtils)
zillowdbloc <- '/Volumes/G-DRIVE-mobile-SSD-R-Series/ZTrans/sorting_wui.sqlite'
ztrax_database <- dbConnect(RSQLite::SQLite(), zillowdbloc)
hmda_database <- dbConnect(Postgres(), host = 'localhost', dbname = 'hmda',
password = '', user = 'postgres')
out_dat = readRDS('/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta')
out_dat
out_dat$TRACTBASE
out_dat$TRACTCE10
out_dat$TRACTCE
out_dat$TRACTSUF
out_dat$TRACT_NAME
out_dat$TRACTSUF
out_dat$TRACT
out_dat$X
out_dat$Y
ca_blocks = tigris::block_groups(state = '06')
ca_blocks
ca_blocks = tigris::block_groups(state = 'CA')
View(prop)
zillowdbloc <- '/Volumes/G-DRIVE-mobile-SSD-R-Series/ZTrans/sorting_wui.sqlite'
ztrax_database <- dbConnect(RSQLite::SQLite(), zillowdbloc)
hmda_database <- dbConnect(Postgres(), host = 'localhost', dbname = 'hmda',
password = '', user = 'postgres')
ca_blocks = tigris::block_groups(state = 'CA')
#to maintain same-race-categories across years - restrict to 2005-2017 sales
yrs = c(2005:2016)
tblist = paste(rep('lar', each = length(yrs)), yrs, sep = '_')
out_dat = readRDS('/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta') %>%
select(ImportParcelID, TransId, respondent_id_prop, sequence_num,
InitialInterestRate, RecordingDate, loan_amount, SalesPriceAmount,
PropertyLandUseStndCode, year)
#grab spatial data in R
#Wui read-in
print('!!!!!!!!!!!!!!!!!BIG WARNING SECTION!!!!!!!!!!!!!!!!!!!!!!!!!!')
wui = ogr2ogr("/Volumes/G-DRIVE-mobile-SSD-R-Series/ca_wui_cp12.gdb", "wui.shp", "ca_wui_cp12", nlt = "MULTIPOLYGON")
wuiogr = readOGR('wui.shp')
#Wui convert
wui_sf = st_as_sf(wuiogr)
#wildfire potential files - 2012 and 2018
wfp2012 = raster("/Volumes/G-DRIVE-mobile-SSD-R-Series/RDS-2015-0045/Data/wfp_2012_continuous/wfp2012_cnt")
wfp2018 =raster("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/Raw_data/WFP_Layers/RDS-2015-0047-2/Data/whp_2018_continuous/whp2018_cnt")
NLCD2006 = raster('/Volumes/G-DRIVE-mobile-SSD-R-Series/ZTrans/NLCD_2006_Land_Cover_L48_20190424/NLCD_2006_Land_Cover_L48_20190424.img')
out_df = data.table()
yr = 2013
print(paste0('Starting data for year ', yr))
out_dat_tmp = out_dat %>% filter(year == yr)
print(paste0('found ', nrow(out_dat_tmp), ' in year ', yr))
print('loading hmda database')
tablename = paste('lar', yr, sep =  '_')
hmda_data = tbl(hmda_database,  in_schema('hmda_public',tablename))
#grab IDs for matching
hmda_id = out_dat_tmp %>% select(sequence_num, respondent_id_prop) %>%
mutate(sequence_num = str_pad(as.character(sequence_num), 7, ' ', side = 'left'))
ztrax_id = out_dat_tmp %>% select(TransId, ImportParcelID)
hmda_data %<>% mutate(agency_code = ifelse(is.na(agency_code), '023', agency_code))%>%
mutate(respondent_id_prop = str_c(agency_code, respondent_id, sep = ''))
#merge to main hmda result
print(paste0('beginning merge with hmda database for year ', yr))
hmda_out = merge(hmda_id, hmda_data %>% select(respondent_id_prop, sequence_num, applicant_race_1,
income, applicant_ethnicity, census_tract, county_code, state_code,msa, rate_spread, applicant_sex),
by = c('sequence_num', 'respondent_id_prop'))
print(paste0('hmda_out found ', nrow(out_dat_tmp), ' in year ', yr))
#merge to transaction result - no useful data in this table...yet
#ztrax_out1 = merge(ztrax_id %>% select(TransId), tbl(ztrax_database, "largetransaction") %>% select(TransId,County) %>% unique(), by = c('TransId'))
#merge to property characteristic result
print('beginning z-trax merge')
ztrax_out2 = merge(ztrax_id %>% select(ImportParcelID, TransId), tbl(ztrax_database, 'AssmtJoined') %>%
select(ImportParcelID, PropertyAddressLatitude, PropertyAddressLongitude, YearBuilt, BuildingAreaSqFt, PropertyCity,
TotalBedrooms, TotalCalculatedBathCount),
by = c('ImportParcelID'))
print(paste0('ztrax_out2 found ', nrow(out_dat_tmp), ' in year ', yr))
ztrax_hmda = merge(out_dat_tmp %>% select(sequence_num, respondent_id_prop,ImportParcelID,
PropertyLandUseStndCode, SalesPriceAmount, loan_amount, RecordingDate,
InitialInterestRate), ztrax_out2, by.x = c('ImportParcelID'), by.y = c('ImportParcelID'))
print(paste0('ztrax_hmda found ', nrow(out_dat_tmp), ' in year ', yr))
print('merging ztrax and hmda')
ztrax_hmda = merge(ztrax_hmda, hmda_out,
by = c('sequence_num', 'respondent_id_prop'))
print(paste0('ztrax_hmda found ', nrow(out_dat_tmp), ' in year ', yr))
print(paste0('Found ', nrow(ztrax_hmda), ' matches in the HMDA/Ztrax dataset (post merge)')
print('converting to sf')
ztrax_hmda_sf = st_as_sf(ztrax_hmda%>% filter(!is.na(PropertyAddressLongitude)& !is.na(PropertyAddressLatitude)),
coords = c("PropertyAddressLongitude", "PropertyAddressLatitude"),
crs = 4269, agr = "constant") %>% unique()
#set crs to match ztrax
print('extracting spatial results')
#extract wildfire risk - 2018 raster (continuous)
ztrax_hmda_sf$WFPC_risk2018 = raster::extract(wfp2018, ztrax_hmda_sf)
#extract wildfire risk - 2012 raster (continuous)
ztrax_hmda_sf$WFPC_risk2012 = raster::extract(wfp2012, ztrax_hmda_sf)
print('extracting elevation')
ztrax_hmda_sf$elevation = get_elev_point(ztrax_hmda_sf %>% select(geometry), src = c("aws")) #200 minutes to gather
wui_sf1 = st_transform(wui_sf, st_crs(ztrax_hmda_sf))
ca_blocks = st_transform(ca_blocks, st_crs(ztrax_hmda_sf))
ztrax_hmda_sf = st_join(ztrax_hmda_sf, wui_sf1, join = st_within)
ztrax_hmda_sf = st_join(ztrax_hmda_sf, ca_blocks, join = st_within)
ztrax_hmda_sf %>% mutate(wuiflag00 = ifelse(!grepl(WUICLASS00, pattern = 'NoVeg', fixed = TRUE), 1, 0),
wuiflag10 = ifelse(!grepl(WUICLASS10, pattern = 'NoVeg', fixed = TRUE),1,0)) %>% select_if(!grepl(names(.), pattern = '2010')|!grepl(names(.), pattern = '2000')|!grepl(names(.), pattern = '1990'))
#find percentage of different land cover in 2006 at each homesite
print('producing land cover kilometer raster -- skipped, takes too long')
#ztrax_lc_dat = raster::extract(NLCD2006, ztrax_hmda_sf, buffer = 200)
#tmptab1 = lapply(ztrax_lc_dat, FUN = function(x) table(x)/(table(x) %>% sum()))
#renamelambda = function(x, named){names(named[[x]]) = paste0('lc',names(named[[x]]))
#	return(named[[x]])
#}
#tmptab2 = lapply(1:length(tmptab1), FUN = renamelambda, named = tmptab1)
#tmptab3 <- rbindlist(lapply(tmptab2, function(x) as.data.frame.list(x)), fill=TRUE)
#tmptab3[is.na(tmptab3),] = 0
#extract point elevation
#bind land cover information to ztrax
print('rbind then start new year')
out_df = rbindlist(list(out_df, ztrax_hmda_sf %>% select(-geometry) %>% data.table()))
print(paste0('found ', nrow(out_dat_tmp), ' in year ', yr))
print('loading hmda database')
print(paste0('beginning merge with hmda database for year ', yr))
# Load 'lmtest'
p_load(lmtest)
library(pacman)
p_load(lmtest)
# Load 'lmtest'
p_load(lmtest)
# F test
waldtest(ols_1d, c("price_oil", "lag(price_prop, 1)", 'lag(price_prop, 2)'))
# Estimate model 1a with OLS
ols_1d <- lm(
price_gas ~ price_oil + price_prop + lag(price_prop, 1) + lag(price_prop, 2),
data = price_df
)
# Results
tidy(ols_1d)
# Knitr options
library(knitr)
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
warning = F,
message = F
)
opts_chunk$set(dev = "svg")
options(device = function(file, width, height) {
svg(tempfile(), width = width, height = height)
})
options(digits = 4)
options(width = 90)
# Load packages
library(pacman)
p_load(tidyverse, broom, here)
# Load data
price_df <- read_csv("ps03_data.csv")
# Estimate model 1a with OLS
ols_1a <- lm(price_gas ~ price_prop, data = price_df)
# Results
tidy(ols_1a)
# Estimate model 1a with OLS
ols_1d <- lm(
price_gas ~ price_oil + price_prop + lag(price_prop, 1) + lag(price_prop, 2),
data = price_df
)
# Results
tidy(ols_1d)
# Load 'lmtest'
p_load(lmtest)
# F test
waldtest(ols_1d, c("price_oil", "lag(price_prop, 1)", 'lag(price_prop, 2)'))
pagedown::chrome_print(
input = "ps03_questions.html",
output = "ps03.pdf",
timeout = 60
)
pagedown::chrome_print(
input = "ps03_questions.html",
output = "ps03.pdf",
timeout = 60
)
pagedown::chrome_print(
input = "ps03_ans.html",
output = "ps03_solutions.pdf",
timeout = 60
)
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
round(ols_1d$coefficients[2],3)
pagedown::chrome_print(
input = "ps03_ans.html",
output = "ps03_solutions.pdf",
timeout = 60
)
pagedown::chrome_print(
input = "ps03_ans.html",
output = "ps03_solutions.pdf",
timeout = 60
)
