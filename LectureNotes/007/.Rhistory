axis.title = element_blank(),
plot.margin = structure(c(0, 0, -0.5, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 18, family = "STIXGeneral"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_math <- theme_void() + theme(
text = element_text(family = "MathJax_Math"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_serif <- theme_void() + theme(
text = element_text(family = "MathJax_Main"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes <- theme_void() + theme(
text = element_text(family = "Fira Sans Book"),
axis.title = element_text(size = 18),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = grey_light,
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
# Load births data; drop totals; create time variable
birth_df <- read_csv("usa_birth_1933_2015.csv") %>%
janitor::clean_names() %>%
filter(month != "TOT") %>%
mutate(
month = as.numeric(month),
time = year + (month-1)/12
)
# Load days of months data
days_df <- read_csv("days_of_month.csv")
# Clean up days
days_lon <- gather(days_df, year, n_days, -Month)
days_lon <- janitor::clean_names(days_lon)
days_lon$year <- as.integer(days_lon$year)
# Join
birth_df <- left_join(
x = birth_df,
y = days_lon,
by = c("year", "month")
)
# Calculate 30-day equivalent births by month
birth_df %<>% mutate(
births_30day = births / n_days * 30
)
lo <- min(c(birth_df$births, birth_df$births_30day))
hi <- max(c(birth_df$births, birth_df$births_30day))
# Plot standard time-series graph of birth rates
ggplot(data = birth_df,
aes(time, births/1e5)
) +
geom_line(color = red_pink) +
ylab("Births (100K)") +
xlab("Time") +
theme_pander(base_family = "Fira Sans Book", base_size = 20)
# Plot newfangled time-series graph of birth rates
ggplot(data = birth_df %>% filter(year < 2050),
aes(
x = year, y = factor(month, labels = month.abb),
fill = births_30day /1e5, color = (births/n_days) * 30 /1e5
)
) +
geom_tile() +
xlab("Year") +
ylab("Month") +
theme_pander(base_family = "Fira Sans Book", base_size = 20) +
scale_fill_viridis("Births (100K)", option = "magma", limits = c(lo, hi)/1e5) +
scale_color_viridis("Births (100K)", option = "magma", limits = c(lo, hi)/1e5) +
theme(
legend.position = "bottom",
legend.key.width = unit(1.5, units = "in"),
legend.key.height = unit(0.2, units = "in"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
line = element_blank(),
rect = element_blank(),
axis.ticks = element_blank()
)
pagedown::chrome_print(
input = "07-time-series.html",
timeout = 60
)
pagedown::chrome_print(
input = here("07-time-series.html"),
timeout = 60
)
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(
broom, here, tidyverse,
latex2exp, ggplot2, ggthemes, viridis, extrafont, gridExtra,
kableExtra,
dplyr, magrittr, knitr, parallel
)
# Define pink color
red_pink <- "#e64173"
turquoise <- "#20B2AA"
grey_light <- "grey70"
grey_mid <- "grey50"
grey_dark <- "grey20"
# Dark slate grey: #314f4f
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
warning = F,
message = F
)
opts_chunk$set(dev = "svg")
options(device = function(file, width, height) {
svg(tempfile(), width = width, height = height)
})
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -0.5, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 18, family = "STIXGeneral"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_math <- theme_void() + theme(
text = element_text(family = "MathJax_Math"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_serif <- theme_void() + theme(
text = element_text(family = "MathJax_Main"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes <- theme_void() + theme(
text = element_text(family = "Fira Sans Book"),
axis.title = element_text(size = 18),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = grey_light,
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
pagedown::chrome_print(
input = here("07-time-series.html"),
timeout = 60
)
pagedown::chrome_print(
input = "/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/LectureNotes/007/07-timeseries.html",
timeout = 60
)
p_load(datasets-package)
View(theme_axes_math)
p_load(datasets)
ability.cov$cov
pagedown::chrome_print(
input = "review/midterm-review.html",
timeout = 60
)
pagedown::chrome_print(
input = "/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/LectureNotes/MidtermReview/MidtermReview.html",
timeout = 60
)
pagedown::chrome_print(
input = "MidtermReview/midterm-topics.html",
timeout = 60
)
pagedown::chrome_print(
input = "/Users/connor/Desktop/GithubProjects/Econometrics/EC421/Spring2021/LectureNotes/MidtermReview/Midterm_Topics.html",
timeout = 60
)
final_hmda = read_dta("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
final_hmda = read.dta("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
p_load(haven)
library(pacman)
p_load(haven)
final_hmda = read.dta("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
final_hmda = read_dta("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
final_hmda = read_csv("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
p_load(tidyverse)
final_hmda = read_csv("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
final_hmda$X
final_hmda = fread("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
p_load(data.table)
final_hmda = fread("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
load("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
fnl_hmda = readRDS("/Users/connor/Desktop/GithubProjects/propval-wui/sorting-wui/intermediate/final_hmdazil.dta")
fnl_hmda$loan_amount
fnl_hmda$SalesPriceAmount
fnl_hmda$year
fnl_hmda$year %>% summary()
fnl_hmda %>% dim()
fnl_hmda$TRACT_NAME
fnl_hmda$TRACTBASE
fnl_hmda$TRACTSUF
fnl_hmda$TRACT
fnl_hmda
fnl_hmda %>% filter
fnl_hmda %>% filter(year %in% c(2006:2016))
# Load packages
library(pacman)
p_load(tidyverse, broom, here)
# Load data
price_df <- read_csv("ps03_data.csv")
# Estimate model 1a with OLS
ols_1a <- lm(price_gas ~ price_prop, data = price_df)
# Results
tidy(ols_1a)
# Estimate model 1a with OLS
ols_1d <- lm(
price_gas ~ price_oil + price_prop + lag(price_prop, 1) + lag(price_prop, 2),
data = price_df
)
# Results
tidy(ols_1d)
ols_1d %>% summary()
# Load 'lmtest'
p_load(lmtest)
# F test
waldtest(ols_1d, c("price_oil", "lag(price_prop, 1)"))
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 2) + lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
ols_1d %>% summary()
ols_1i %>% summary()
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_prop,2)+ lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
tidy(ols_1i)
# Add residuals from our estimated model in 1i to dataset 'price_df'
price_df$e_1i <- c(NA, residuals(ols_1i))
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes)
# Plot 1: Residuals over time
ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1i)") +
theme_pander()
# Residuals from the model in 1a
price_df$e_1a <- residuals(ols_1a)
# Residuals from the model in 1d
price_df$e_1d <- c(NA, NA, residuals(ols_1d))
e_1d
price_df$e_1d
# Plot 1a 1: Residuals over time
ggplot(data = price_df, aes(x = t_month, y = e_1a)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1a)") +
theme_pander()
# Plot 1a 2: Residuals against their lags
ggplot(data = price_df, aes(x = lag(e_1a), y = e_1a)) +
geom_point() +
xlab("Lagged residual (1a)") + ylab("Residual (1a)") +
theme_pander()
# Plot 1d 1: Residuals over time
ggplot(data = price_df, aes(x = t_month, y = e_1d)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1d)") +
theme_pander()
# Plot 1d 2: Residuals against their lags
ggplot(data = price_df, aes(x = lag(e_1d), y = e_1d)) +
geom_point() +
xlab("Lagged residual (1d)") + ylab("Residual (1d)") +
theme_pander()
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# Add residuals from our estimated model in 1i to dataset 'price_df'
price_df$e_1i <- c(NA, residuals(ols_1i))
# Add residuals from our estimated model in 1i to dataset 'price_df'
price_df$e_1i <- c(NA, NA, residuals(ols_1i))
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes)
# Plot 1: Residuals over time
ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1i)") +
theme_pander()
# Plot 2: Residuals against their lags
ggplot(data = price_df, aes(x = lag(e_1i), y = e_1i)) +
geom_point() +
xlab("Lagged residual (1i)") + ylab("Residual (1i)") +
theme_pander()
# Residuals from the model in 1a
price_df$e_1a <- residuals(ols_1a)
# Residuals from the model in 1d
price_df$e_1d <- c(NA, NA, residuals(ols_1d))
# Plot 1a 1: Residuals over time
ggplot(data = price_df, aes(x = t_month, y = e_1a)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1a)") +
theme_pander()
# Plot 1a 2: Residuals against their lags
ggplot(data = price_df, aes(x = lag(e_1a), y = e_1a)) +
geom_point() +
xlab("Lagged residual (1a)") + ylab("Residual (1a)") +
theme_pander()
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# F test
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# F test
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# F test
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
p_load(kable, kableExtra)
var_tbl <- data.frame(
Variable = names(price_df) %>% magrittr::extract(1:8) %>% paste0(".mono-small[", ., "]"),
Description = c(
"The observation's month and year (.mono-small[character])",
"The average (Henry Hub) price of natural gas, $ per 1MM BTU (.mono-small[numeric])",
"The average (Brent Crude) price of oil, $ per barrel",
"The average Retail/Resale price of propane, $ per gallon (.mono-small[numeric])",
"Month of Observation (.mono-small[numeric])",
"Year of Observation (.mono-small[numeric])",
"Time, measured by months in the dataset (.mono-small[numeric])",
"Time, approximately by fractions of years (.mono-small[numeric])"
)
)
kable(var_tbl) %>%
kable_styling(full_width = F)
price_df
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_prop,2)+ lag(price_gas, 1) + as.factor(year),
data = price_df
)
# Results
tidy(ols_1i)
# Estimate model 1a with OLS
ols_1d <- lm(
price_gas ~ price_oil + price_prop + lag(price_prop, 1) + lag(price_prop, 2),
data = price_df
)
# Results
tidy(ols_1d)
round(ols_1d$coefficients[3], 3)
round(ols_1a$coefficients[3], 3)
round(ols_1a$coefficients[1], 3)
round(ols_1a$coefficients[2], 3)
round(ols_1a$coefficients[3], 3)
round(ols_1d$coefficients[3], 3)
round(ols_1d$coefficients[4], 3)
round(ols_1d$coefficients[5], 3)
round(summary(ols_1d)$r.squared, 3)
round(summary(ols_1d)$adj.r.squared, 3)
# OLS model of y on x and two lags
est_model <- lm(y ~ x + z + lag(x) + lag(x, 2), data = example_df)
system("decktape remark ps03Solutions.html ps03Solutions.pdf --chrome-arg=--allow-file-access-from-files")
pagedown::chrome_print(
input = "ps03-init.html",
output = "ps03.pdf"
timeout = 60
pagedown::chrome_print(
input = "ps03-init.html",
output = "ps03.pdf",
timeout = 60
)
# Knitr options
library(knitr)
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
warning = F,
message = F
)
opts_chunk$set(dev = "svg")
options(device = function(file, width, height) {
svg(tempfile(), width = width, height = height)
})
options(digits = 4)
options(width = 90)
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_prop,2)+ lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
pagedown::chrome_print(
input = "ps03_questions.html",
output = "ps03.pdf",
timeout = 60
)
pagedown::chrome_print(
input = "ps03_ans.html",
output = "ps03_solutions.pdf",
timeout = 60
)
pagedown::chrome_print(
input = "ps03_questions.html",
output = "ps03.pdf",
timeout = 60
)
pagedown::chrome_print(
input = "ps03_questions.html",
output = "ps03.pdf",
timeout = 60
)
