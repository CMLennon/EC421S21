# The full DAG
dag_full = dagify(
Y ~ D,
Y ~ W,
D ~ W,
coords = tibble(
name = c("Y", "D", "W"),
x = c(1, 3, 2),
y = c(2, 2, 1)
)
)
p_load(
broom, tidyverse,
ggplot2, ggthemes, ggforce, ggridges, ggdag, dagitty, cowplot, patchwork, scales,
latex2exp, viridis, extrafont, grid, gridExtra, plotly, ggformula,
kableExtra, DT,
data.table, dplyr, snakecase, janitor,
lubridate, knitr, future, furrr, parallel,
MASS, estimatr, FNN, parsnip, caret, glmnet,
huxtable, here, magrittr
)
library(pacman)
p_load(
broom, tidyverse,
ggplot2, ggthemes, ggforce, ggridges, ggdag, dagitty, cowplot, patchwork, scales,
latex2exp, viridis, extrafont, grid, gridExtra, plotly, ggformula,
kableExtra, DT,
data.table, dplyr, snakecase, janitor,
lubridate, knitr, future, furrr, parallel,
MASS, estimatr, FNN, parsnip, caret, glmnet,
huxtable, here, magrittr
)
# The full DAG
dag_full = dagify(
Y ~ D,
Y ~ W,
D ~ W,
coords = tibble(
name = c("Y", "D", "W"),
x = c(1, 3, 2),
y = c(2, 2, 1)
)
)
# Convert to data.table
dag_dt = dag_full %>% fortify() %>% setDT()
# Add indicators for paths
dag_dt[, `:=`(
path1 = (name == "D" & to == "Y") | (name == "Y"),
path2 = (name == "D" & to == "W") | (name == "W" & to == "Y") | (name == "Y")
)]
# Shorten segments
mult = 0.15
dag_dt[, `:=`(
xa = x + (xend-x) * (mult),
ya = y + (yend-y) * (mult),
xb = x + (xend-x) * (1-mult),
yb = y + (yend-y) * (1-mult)
)]
# Plot the full DAG
ggplot(
data = dag_dt,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_point(
size = 20,
fill = "white",
color = slate,
shape = 21,
stroke = 0.6
) +
geom_curve(
aes(x = xa, y = ya, xend = xb, yend = yb),
curvature = 0,
arrow = arrow(length = unit(0.07, "npc")),
color = slate,
size = 1.2,
lineend = "round"
) +
geom_text(
data = dag_dt[,.(name,x,y,xend=x,yend=y)] %>% unique(),
aes(x = x, y = y, label = name),
family = "Fira Sans Medium",
size = 8,
color = slate,
fontface = "bold"
) +
theme_void() +
theme(
legend.position = "none",
) +
coord_cartesian(
xlim = c(dag_dt[,min(x)]*0.95, dag_dt[,max(x)]*1.05),
ylim = c(dag_dt[,min(y)]*0.8, dag_dt[,max(y)]*1.1)
)
red_pink <- "#e64173"
turquoise <- "#20B2AA"
orange <- "#FFA500"
red <- "#fb6107"
blue <- "#3b3b9a"
green <- "#8bb174"
grey_light <- "grey70"
grey_mid <- "grey50"
grey_dark <- "grey20"
purple <- "#6A5ACD"
slate <- "#314f4f"
# Plot the full DAG
ggplot(
data = dag_dt,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_point(
size = 20,
fill = "white",
color = slate,
shape = 21,
stroke = 0.6
) +
geom_curve(
aes(x = xa, y = ya, xend = xb, yend = yb),
curvature = 0,
arrow = arrow(length = unit(0.07, "npc")),
color = slate,
size = 1.2,
lineend = "round"
) +
geom_text(
data = dag_dt[,.(name,x,y,xend=x,yend=y)] %>% unique(),
aes(x = x, y = y, label = name),
family = "Fira Sans Medium",
size = 8,
color = slate,
fontface = "bold"
) +
theme_void() +
theme(
legend.position = "none",
) +
coord_cartesian(
xlim = c(dag_dt[,min(x)]*0.95, dag_dt[,max(x)]*1.05),
ylim = c(dag_dt[,min(y)]*0.8, dag_dt[,max(y)]*1.1)
)
# Plot the full DAG
ggplot(
data = dag_dt,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_point(
size = 20,
color = red_pink
) +
geom_curve(
aes(x = xa, y = ya, xend = xb, yend = yb),
curvature = 0,
arrow = arrow(length = unit(0.07, "npc")),
color = "grey80",
size = 1.2,
lineend = "round"
) +
geom_text(
data = dag_dt[,.(name,x,y,xend=x,yend=y)] %>% unique(),
aes(x = x, y = y, label = name),
family = "Fira Sans Medium",
size = 8,
color = "white",
fontface = "bold"
) +
theme_void() +
theme(
legend.position = "none",
) +
coord_cartesian(
xlim = c(dag_dt[,min(x)]*0.95, dag_dt[,max(x)]*1.05),
ylim = c(dag_dt[,min(y)]*0.8, dag_dt[,max(y)]*1.1)
)
# Plot the full DAG
ggplot(
data = dag_dt,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_point(
size = 20,
fill = "white",
color = "grey80",
shape = 21,
stroke = 0.6
) +
geom_curve(
aes(x = xa, y = ya, xend = xb, yend = yb),
curvature = 0,
arrow = arrow(length = unit(0.07, "npc")),
color = purple,
size = 1.2,
lineend = "round"
) +
geom_text(
data = dag_dt[,.(name,x,y,xend=x,yend=y)] %>% unique(),
aes(x = x, y = y, label = name),
family = "Fira Sans Medium",
size = 8,
color = "grey80",
fontface = "bold"
) +
theme_void() +
theme(
legend.position = "none",
) +
coord_cartesian(
xlim = c(dag_dt[,min(x)]*0.95, dag_dt[,max(x)]*1.05),
ylim = c(dag_dt[,min(y)]*0.8, dag_dt[,max(y)]*1.1)
)
ylim = c(dag_dt[,min(y)]*0.8, dag_dt[,max(y)]*1.1)
p_load(data.table)
dat1 = fread(''ztrax_hmda_data_CA.csv'')
dat1 = fread('ztrax_hmda_data_CA.csv')
dat1 = fread('Users/connor/ztrax_hmda_data_CA.csv')
dat1 = fread('connor/ztrax_hmda_data_CA.csv')
dat1 = fread('/Users/connor/ztrax_hmda_data_CA.csv')
dat1 %>% select(sequence_num:elevation.elevation)
dat1$ %>% select(1:30)
dat1 %>% select(1:30)
dat1 %>% select(!contains(1990)) %>% select(!contains(2000)) select(!contains(2010))
dat1 %>% select(!contains(1990)) %>% select(!contains(2000)) %>% select(!contains(2010))
dat1 %>% select(!contains('1990')) %>% select(!contains('2000')) %>% select(!contains('2010'))
dat1 %>% select(contains('1990')) %>% select(contains('2000')) %>% select(contains('2010'))
dat1 %>% select(contains(c('1990', '2000', '2010'))
)
dat1 %>% as_tibble() %>% select(contains(c('1990', '2000', '2010')))
dat1 %>% as_tibble() %>% select(ends_with(c('1990', '2000', '2010')))
p_load(tidyverse)
dat1 %>% as_tibble() %>% select(ends_with(c('1990', '2000', '2010')))
p_load(tidyselect)
dat1 %>% as_tibble() %>% select(ends_with(c('1990', '2000', '2010')))
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
p_update(dplyr)
library(pacman)
pacman::p_update()
dat1 %>% as_tibble() %>% select(ends_with(c('1990', '2000', '2010')))
p_load(tidyverse)
p_update()
p_load(tidyverse)
p_load(dplyr)
library(pacman)
p_load(tidyverse)
read_csv('/Users/connor/ztrax_hmda_data_CA.csv') %>% select(sequence_num:elevation.elevation)
read_csv('/Users/connor/ztrax_hmda_data_CA.csv') %>% select(sequence_num:elevation.elevation|contains('WUICLASS'))
outdata = read_csv('/Users/connor/ztrax_hmda_data_CA.csv') %>% select(sequence_num:elevation.elevation|contains('WUICLASS'))
outdata %<>% mutate(wuiflag90 = ifelse(!grepl(WUICLASS90, 'NoVeg', fixed = TRUE), 1, 0)
)
p_load(magrittr)
outdata %<>% mutate(wuiflag90 = ifelse(!grepl(WUICLASS90, 'NoVeg', fixed = TRUE), 1, 0)
)
outdata %<>% mutate(wuiflag90 = ifelse(!grepl(WUICLASS90, pattern = 'NoVeg', fixed = TRUE), 1, 0))
outdata %<>% mutate(wuiflag00 = ifelse(!grepl(WUICLASS00, pattern = 'NoVeg', fixed = TRUE), 1, 0))
outdata %<>% mutate(wuiflag10 = ifelse(!grepl(WUICLASS10, pattern = 'NoVeg', fixed = TRUE), 1, 0))
outdata
outdata$applicant_race_1
outdata$census_tract
outdata %<>% select(!contains('WUICLASS'))
outdata
p_load(haven)
outdata %>% write_dta('ztrax_hmda_data_CA.dta')
outdata %<>% mutate(elevation = elevation.elevation) %>% select(!elevation.elevation)
outdata %>% write_dta('ztrax_hmda_data_CA.dta')
outdata %>% select(RecordingDate) %>% unique()
outdata$RecordingDate %>% unique()
outdata$RecordingDate %>% as_date() %>% unique()
p_loaf(lubridate)
p_load(lubridate)
outdata$RecordingDate %>% as_date() %>% unique()
outdata$RecordingDate %>% as_date() %>% summary()
outdata %>% dim()
outdata$ImportParcelID %>% duplicated()
outdata %>% mutate(RecordingDate = asDate(RecordingDate)) %>% write_dta('ztrax_hmda_data_CA.dta')
outdata %>% mutate(RecordingDate = as_date(RecordingDate)) %>% write_dta('ztrax_hmda_data_CA.dta')
