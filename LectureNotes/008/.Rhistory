# Function for one iteration of the simulation
sim_fun <- function(x, rho, b0, b1, b2, t) {
# Start generating data (initialize y as 1)
# NOTE: u and u2 are both AR(1): u is manual; u2 uses canned function 'arima.sim'
data_x <- tibble(
e = rnorm(t),
u = rnorm(1),
u2 = arima.sim(model = list(ar = c(0.9)), n = t),
x = rnorm(t),
y = 1,
y2 = 1
)
# Calculate u and y, iteratively
for (j in 2:t) {
data_x$u[j] <- rho * data_x$u[j-1] + data_x$e[j]
data_x$y[j] <- b0 + b1 * data_x$x[j] + b2 * data_x$y[j-1] + data_x$u[j]
data_x$y2[j] <- b0 + b1 * data_x$x[j] + b2 * data_x$y2[j-1] + data_x$u2[j]
}
# Regression
lm(y2 ~ x + lag(y2), data = data_x) %>% tidy()
}
# Run the simulation 1,000 times
sim_df <- mclapply(
X = 1:1e4,
FUN = sim_fun,
mc.cores = 8,
rho = rho, b0 = b0, b1 = b1, b2 = b2, t = t
) %>% bind_rows()
library(pacman)
p_load(
broom, here, tidyverse,
latex2exp, ggplot2, ggthemes, viridis, extrafont, gridExtra,
kableExtra,
dplyr,
lubridate,
magrittr, knitr, parallel
)
# Function for one iteration of the simulation
sim_fun <- function(x, rho, b0, b1, b2, t) {
# Start generating data (initialize y as 1)
# NOTE: u and u2 are both AR(1): u is manual; u2 uses canned function 'arima.sim'
data_x <- tibble(
e = rnorm(t),
u = rnorm(1),
u2 = arima.sim(model = list(ar = c(0.9)), n = t),
x = rnorm(t),
y = 1,
y2 = 1
)
# Calculate u and y, iteratively
for (j in 2:t) {
data_x$u[j] <- rho * data_x$u[j-1] + data_x$e[j]
data_x$y[j] <- b0 + b1 * data_x$x[j] + b2 * data_x$y[j-1] + data_x$u[j]
data_x$y2[j] <- b0 + b1 * data_x$x[j] + b2 * data_x$y2[j-1] + data_x$u2[j]
}
# Regression
lm(y2 ~ x + lag(y2), data = data_x) %>% tidy()
}
# Run the simulation 1,000 times
sim_df <- mclapply(
X = 1:1e4,
FUN = sim_fun,
mc.cores = 8,
rho = rho, b0 = b0, b1 = b1, b2 = b2, t = t
) %>% bind_rows()
sim_df <- mclapply(
X = 1:1e4,
FUN = sim_fun,
mc.cores = 8,
rho = rho, b0 = b0, b1 = b1, b2 = b2, t = t
) %>% bind_rows()
mclapply(
X = 1:1e4,
FUN = sim_fun,
mc.cores = 8,
rho = rho, b0 = b0, b1 = b1, b2 = b2, t = t
)
sim_fun <- function(x, rho, b0, b1, b2, t) {
# Start generating data (initialize y as 1)
# NOTE: u and u2 are both AR(1): u is manual; u2 uses canned function 'arima.sim'
data_x <- tibble(
e = rnorm(t),
u = rnorm(1),
u2 = arima.sim(model = list(ar = c(0.9)), n = t),
x = rnorm(t),
y = 1,
y2 = 1
)
# Calculate u and y, iteratively
for (j in 2:t) {
data_x$u[j] <- rho * data_x$u[j-1] + data_x$e[j]
data_x$y[j] <- b0 + b1 * data_x$x[j] + b2 * data_x$y[j-1] + data_x$u[j]
data_x$y2[j] <- b0 + b1 * data_x$x[j] + b2 * data_x$y2[j-1] + data_x$u2[j]
}
# Regression
lm(y2 ~ x + lag(y2), data = data_x) %>% tidy()
}
mclapply(
X = 1:1e4,
FUN = sim_fun,
mc.cores = 8,
rho = rho, b0 = b0, b1 = b1, b2 = b2, t = t
)
set.seed(1234)
rho <- 0.9
b0 <- 1
b1 <- 2
b2 <- 0.5
t <- 100
sim_df <- mclapply(
X = 1:1e4,
FUN = sim_fun,
mc.cores = 8,
rho = rho, b0 = b0, b1 = b1, b2 = b2, t = t
) %>% bind_rows()
saveRDS(
object = sim_df,
file = "sim.rds"
)
pagedown::chrome_print(
input = "08-autocorrelation.html",
timeout = 60
)
