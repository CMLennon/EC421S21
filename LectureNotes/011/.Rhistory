alpha = 0.8
) +
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Adding hospitalization
p2 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
aes(color = as.factor(C)),
size = 2.5,
alpha = 0.8
) +
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
scale_color_manual(
"Caridovascular Disease",
values = c(purple, orange),
labels = c("No", "Yes")
) +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Conditioning on hospitalization
p3 = ggplot(
data = cb_dt[C==1],
aes(x = O, y = M)
) +
geom_point(
color = orange,
size = 2.5,
alpha = 0.8
) +
geom_smooth(
color = grey,
SE = F,
method = 'lm'
)+
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "none",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Align the plots
aligned = align_patches(p1, p2, p3)
p_load(patches)
p_load(patchwork)
# Set seed and sample size
set.seed(12345)
n = 100
# Generate O and A independently
cb_dt = data.table(
O = runif(n),
A = runif(n)
)
# Determine cardiovascular disease and mortality
cb_dt[, `:=`(
C = 1*(O + A > 1))]
cb_dt[, `:=`(
M = runif(n)/6 + 2*C/3 + A/6
)]
# Population relationship
p1 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
color = slate,
size = 2.5,
alpha = 0.8
) +
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Adding hospitalization
p2 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
aes(color = as.factor(C)),
size = 2.5,
alpha = 0.8
) +
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
scale_color_manual(
"Caridovascular Disease",
values = c(purple, orange),
labels = c("No", "Yes")
) +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Conditioning on hospitalization
p3 = ggplot(
data = cb_dt[C==1],
aes(x = O, y = M)
) +
geom_point(
color = orange,
size = 2.5,
alpha = 0.8
) +
geom_smooth(
color = grey,
SE = F,
method = 'lm'
)+
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "none",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Align the plots
aligned = align_patches(p1, p2, p3)
aligned[[1]]
p1
# Set seed and sample size
set.seed(12345)
n = 100
# Generate O and A independently
cb_dt = data.table(
O = runif(n),
A = runif(n)
)
# Determine cardiovascular disease and mortality
cb_dt[, `:=`(
C = 1*(O + A > 1))]
cb_dt[, `:=`(
M = runif(n)/6 + 2*C/3 + A/6
)]
# Population relationship
p1 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
color = slate,
size = 2.5,
alpha = 0.8
) +
geom_smooth(se = F, method = 'lm')+
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Adding hospitalization
p2 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
aes(color = as.factor(C)),
size = 2.5,
alpha = 0.8
) +
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
scale_color_manual(
"Caridovascular Disease",
values = c(purple, orange),
labels = c("No", "Yes")
) +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Conditioning on hospitalization
p3 = ggplot(
data = cb_dt[C==1],
aes(x = O, y = M)
) +
geom_point(
color = orange,
size = 2.5,
alpha = 0.8
) +
geom_smooth(
color = grey,
SE = F,
method = 'lm'
)+
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "none",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Align the plots
aligned = align_patches(p1, p2, p3)
# Set seed and sample size
set.seed(12345)
n = 100
# Generate O and A independently
cb_dt = data.table(
O = runif(n),
A = runif(n)
)
# Determine cardiovascular disease and mortality
cb_dt[, `:=`(
C = 1*(O + A > 1))]
cb_dt[, `:=`(
M = runif(n)/6 + 2*C/3 + A/6
)]
# Population relationship
p1 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
color = slate,
size = 2.5,
alpha = 0.8
) +
geom_smooth(se = F, method = 'lm')+
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Adding hospitalization
p2 = ggplot(
data = cb_dt,
aes(x = O, y = M)
) +
geom_point(
aes(color = as.factor(C)),
size = 2.5,
alpha = 0.8
) +
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
scale_color_manual(
"Caridovascular Disease",
values = c(purple, orange),
labels = c("No", "Yes")
) +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "bottom",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Conditioning on hospitalization
p3 = ggplot(
data = cb_dt[C==1],
aes(x = O, y = M)
) +
geom_point(
color = orange,
size = 2.5,
alpha = 0.8
) +
geom_smooth(
data = cb_dt[C==1],
aes(x = O, y = M),
color = grey,
se = F,
method = 'lm'
)+
scale_y_continuous("Mortality Likelihood (M)") +
scale_x_continuous("Obesity (O)") +
theme_minimal(
base_family = "Fira Sans",
base_size = 14
) +
theme(
panel.grid = element_blank(),
legend.position = "none",
legend.margin=margin(t=0, r=0, b=-0.3, l=0, unit="cm")
) +
coord_cartesian(ylim = c(0,1), xlim = c(0,1))
# Align the plots
aligned = align_patches(p1, p2, p3)
lm(data = cb_dt, M ~ O)
lm(data = cb_dt, M ~ O) %>% tidy()
p_load(tidy)
p_load(broom)
lm(data = cb_dt, M ~ O) %>% tidy()
lm(data = cb_dt %>% filter(C == 1), M ~ O) %>% tidy()
pagedown::chrome_print("SCM.html", output = "SCM.pdf")
pagedown::chrome_print("SCM.html", output = "SCMl-nopause.pdf")
pagedown::chrome_print("SCM.html", output = "SCM.pdf")
pagedown::chrome_print("SCM.html", output = "SCMl-nopause.pdf")
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# F test
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
p_load(lmtest)
library(pacman)
p_load(lmtest)
# Regress residuals on explanatory variables and two lags of residuals
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# F test
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
bg_2g
# Residuals from the model in 1a
price_df$e_1a <- residuals(ols_1a)
# Residuals from the model in 1d
price_df$e_1d <- c(NA, NA, residuals(ols_1d))
# Add residuals from our estimated model in 1i to dataset 'price_df'
price_df$e_1i <- c(NA, NA, residuals(ols_1i))
# Regress residuals on explanatory variables and two lags of residuals
price_df$e_1i <- c(NA, NA, residuals(ols_1i))
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
# F test
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
bg_2g
ols_1i
lm(lag(e_1i, 1) ~ lag(e_1i, 2), data = price_df)
lm(lag(e_1i, 1) ~ lag(e_1i, 2), data = price_df) %>% summary()
p_load(tidyverse)
lm(lag(e_1i, 1) ~ lag(e_1i, 2), data = price_df) %>% summary()
lm(lag(e_1i) ~ lag(e_1i, 2), data = price_df) %>% summary()
lm(e_1i ~ lag(e_1i, 2), data = price_df) %>% summary()
bg_2g <- lm(
e_1i ~ price_prop + lag(price_prop, 1) + lag(price_prop,2) + lag(price_gas, 1) + lag(e_1i, 1) + lag(e_1i, 2),
data = price_df
)
bg_2g %>% summary()
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_prop,2)+ lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
p_load(broom)
# Estimate model 1a with OLS
ols_1i <- lm(
price_gas ~ price_prop + lag(price_prop, 1) + lag(price_prop,2)+ lag(price_gas, 1),
data = price_df
)
# Results
tidy(ols_1i)
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes)
# Plot 1: Residuals over time
ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1i)") +
theme_pander()
# Plot 2: Residuals against their lags
ggplot(data = price_df, aes(x = lag(e_1i), y = e_1i)) +
geom_point() +
xlab("Lagged residual (1i)") + ylab("Residual (1i)") +
theme_pander()
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes, patchwork)
# Plot 1: Residuals over time
plot_1 = ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1i)") +
theme_pander()
# Plot 2: Residuals against their lags
plot_2 = ggplot(data = price_df, aes(x = lag(e_1i), y = e_1i)) +
geom_point() +
xlab("Lagged residual (1i)") + ylab("Residual (1i)") +
theme_pander()
plot_1 + plot_2
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes, patchwork)
# Plot 1: Residuals over time
plot_1 = ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual (1i)") +
theme_pander()
# Plot 2: Residuals against their lags
plot_2 = ggplot(data = price_df, aes(x = lag(e_1i), y = e_1i)) +
geom_point() +
xlab("Lagged residual (1i)") + ylab("") +
theme_pander()
plot_1 + plot_2
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes, patchwork)
# Plot 1: Residuals over time
plot_1 = ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.1) +
geom_point() +
xlab("time") + ylab("Residual: Problem 1i") +
theme_pander()
# Plot 2: Residuals against their lags
plot_2 = ggplot(data = price_df, aes(x = lag(e_1i), y = e_1i)) +
geom_point() +
xlab("Lagged Residual") + ylab("") +
theme_pander()
plot_1 + plot_2
# Load 'ggplot2' and 'ggthemes' packages
p_load(ggplot2, ggthemes, patchwork)
# Plot 1: Residuals over time
plot_1 = ggplot(data = price_df, aes(x = t_month, y = e_1i)) +
geom_path(size = 0.1) +
geom_point() +
xlab("Time") + ylab("Residual: Problem 1i") +
theme_pander()
# Plot 2: Residuals against their lags
plot_2 = ggplot(data = price_df, aes(x = lag(e_1i), y = e_1i)) +
geom_point() +
xlab("Lagged Residual") + ylab("") +
theme_pander()
plots = plot_1 + plot_2
plots + plot_annotation(title = 'Autocorrelation Analysis', subtitle = 'plotting residuals against time and lagged residuals', caption = 'found from problem set 1')
# Plot 1d 1: Residuals over time
plot1 = ggplot(data = price_df, aes(x = t_month, y = e_1d)) +
geom_path(size = 0.3) +
geom_point() +
xlab("Time") + ylab("Residual") +
theme_pander()
# Plot 1d 2: Residuals against their lags
plot2 = ggplot(data = price_df, aes(x = lag(e_1d), y = e_1d)) +
geom_point() +
xlab("Lagged residual") + ylab("") +
theme_pander()
plots = plot1 + plot2
plots + plot_annotation(title = 'Autocorrelation Analysis', subtitle = 'plotting residuals against time and lagged residuals', caption = 'residuals from problem 1d')
